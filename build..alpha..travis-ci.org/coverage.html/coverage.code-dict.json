{"/home/travis/build/npmtest/node-npmtest-desklamp/test.js":"/* istanbul instrument in package npmtest_desklamp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-desklamp/lib.npmtest_desklamp.js":"/* istanbul instrument in package npmtest_desklamp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_desklamp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_desklamp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-desklamp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-desklamp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_desklamp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_desklamp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_desklamp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_desklamp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_desklamp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_desklamp.__dirname + '/lib.npmtest_desklamp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-desklamp/node_modules/desklamp/desklamp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsyncLink = exports.Link = exports.Desklamp = exports.Container = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Custom link component\nvar Link = function Link(_ref) {\n  var view = _ref.view;\n  var tag = _ref.tag;\n\n  return _react2.default.createElement(\n    'a',\n    { href: '#' + view },\n    tag\n  );\n};\n// Custom link component to call async functions before routing to page\nvar AsyncLink = function AsyncLink(_ref2) {\n  var view = _ref2.view;\n  var tag = _ref2.tag;\n  var func = _ref2.func;\n\n  return _react2.default.createElement(\n    'a',\n    { href: '#' + view, onClick: function onClick(e) {\n        e.preventDefault();Desklamp.syncRoute(view, func);\n      } },\n    tag\n  );\n};\n\n// Object that contains all functions\nvar Desklamp = {};\n\nvar Container = function (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this));\n\n    _this.state = {\n      view: '',\n      renderNav: '',\n      appState: {},\n      routeStates: {},\n      views: {},\n      userFunctions: {}\n    };\n    // Array that stores the application history\n    _this.stateHistory = [];\n    // Adds addFuncs control to the Desklamp obj\n    _this.addFuncs = _this.addFuncs.bind(_this);\n    Desklamp.addFunc = _this.addFuncs;\n    // Binds routing and view functions\n    _this.changeView = _this.changeView.bind(_this);\n    Desklamp.changeView = _this.changeView;\n    _this.routeLink = _this.routeLink.bind(_this);\n    _this.getRoutes = _this.getRoutes.bind(_this);\n    // Adds updateState and getState funcs to Desklamp obj\n    _this.updateState = _this.updateState.bind(_this);\n    Desklamp.updateState = _this.updateState;\n    _this.getState = _this.getState.bind(_this);\n    Desklamp.getState = _this.getState;\n    // Adds history to Desklamp obj\n    _this.history = _this.history.bind(_this);\n    Desklamp.history = _this.history;\n    // Adds the on function to Desklamp obj\n    _this.on = _this.on.bind(_this);\n    Desklamp.on = _this.on;\n    // Allows the developer to use the componentWillMount on Container component\n    _this.onLoad = _this.onLoad.bind(_this);\n    Desklamp.onLoad = _this.onLoad;\n    // Adds the on function to Desklamp obj to set a default route\n    _this.defaultRoute = _this.defaultRoute.bind(_this);\n    Desklamp.defaultRoute = _this.defaultRoute;\n    // Adds the on function to Desklamp obj\n    _this.syncRoute = _this.syncRoute.bind(_this);\n    Desklamp.syncRoute = _this.syncRoute;\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      window.onhashchange = function () {\n        var pathstring = location.hash;\n        _this2.routeLink(pathstring.replace('#', ''));\n      };\n      this.getRoutes();\n      this.onLoad();\n    }\n\n    // Runs all functions passed to onLoad\n\n  }, {\n    key: 'onLoad',\n    value: function onLoad() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.forEach(function (func) {\n        func();\n      });\n    }\n  }, {\n    key: 'getRoutes',\n    value: function getRoutes() {\n      var newRoutes = {};\n      var startRoute = void 0;\n      var children = this.props.children.constructor === Object ? [this.props.children] : this.props.children;\n      // if no starting route passed in, go get starting route from first child\n      // if there are no children of container, default route is '/'\n      if (!this.props.children) {\n        startRoute = '';\n        throw new TypeError('Container must have children components in order to create Routes');\n      } else {\n        startRoute = children[0].type;\n        children.forEach(function (route) {\n          var routeName = '';\n          if (route.props.children) {\n            addChildrenRoutes(routeName, route);\n          } else {\n            if (typeof route.props.name === 'string') {\n              newRoutes['/' + route.props.name] = route.type;\n            } else {\n              var _routeName = route.type.name.toLowerCase();\n              newRoutes['/' + _routeName] = route.type;\n            }\n          }\n\n          function addChildrenRoutes(topString, currentChild) {\n            var name = 'type';\n            if (typeof currentChild.props.name === 'string') {\n              name = 'props';\n            }\n\n            var childRouteName = topString += '/' + currentChild[name].name.toLowerCase();\n\n            newRoutes[childRouteName] = currentChild.type;\n\n            if (currentChild.props.children) {\n              var _children = currentChild.props.children.constructor === Object ? [currentChild.props.children] : currentChild.props.children;\n              for (var i = 0; i < _children.length; i++) {\n                var tempRouteName = childRouteName;\n                var currChild = _children[i];\n                var otherName = 'type';\n                if (typeof currChild.props.name === 'string') {\n                  otherName = 'props';\n                }\n                var newRouteName = tempRouteName += '/' + currChild[otherName].name.toLowerCase();\n                newRoutes[newRouteName] = currChild.type;\n                if (currChild.props.children) {\n                  addChildrenRoutes(tempRouteName, currChild.props.children);\n                }\n              }\n            }\n          }\n        });\n      }\n      var newState = Object.assign({}, this.state.views, newRoutes);\n      var routeName = children[0].props.name || children[0].type.name.toLowerCase();\n      window.location.hash = '#/' + routeName;\n      this.setState({ views: newState, view: startRoute });\n    }\n  }, {\n    key: 'syncRoute',\n    value: function syncRoute(view, func) {\n      var first = new Promise(function (resolve, reject) {\n        func();\n      });\n      first.then(window.location.hash = view);\n    }\n\n    // Allows the developer to update the state of their application\n\n  }, {\n    key: 'updateState',\n    value: function updateState(newObj) {\n      if (newObj.constructor === Object) {\n        // Save old appState to history\n        this.history(this.state.appState);\n        // Update appState with new state\n        var newState = Object.assign({}, this.state.appState, newObj);\n        this.setState({ appState: newState });\n      } else {\n        throw new Error('updateState(): arg must be an object.');\n      }\n    }\n\n    // Displays the current application state\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      return this.state.appState;\n    }\n\n    // Keeps a point in time snapshot of the application state\n\n  }, {\n    key: 'history',\n    value: function history(newState) {\n      var oldHistory = this.stateHistory;\n      this.stateHistory = [].concat(_toConsumableArray(oldHistory), [newState]);\n    }\n\n    // Initializes the default state, user functions, start route and navbar.\n\n  }, {\n    key: 'on',\n    value: function on(initState, userFuncs, navbar) {\n      if (initState.constructor !== Object && initState !== undefined) {\n        throw new TypeError('on(): takes an object as a first parameter representing initial state');\n      }\n      if (userFuncs.constructor !== Object && userFuncs !== undefined) {\n        throw new TypeError('on(): takes an object as a second parameter which contains functions');\n      }\n      if (navbar.constructor !== Function && navbar !== undefined) {\n        throw new TypeError('on(): takes a React component as a third param');\n      }\n      // Update the state to passed in initial state\n      this.updateState(initState);\n      // Add userFuncs to the userFunctions object\n      this.addFuncs(userFuncs);\n      // If navbar param is set to true we add navbar as the first children\n      if (!navbar) {\n        navbar = undefined;\n      }\n      this.setState({ renderNav: navbar });\n    }\n  }, {\n    key: 'defaultRoute',\n    value: function defaultRoute(route) {\n      var defaultView = Object.assign({}, this.state.views);\n      var otherName = 'type';\n      if (typeof route !== 'string') {\n        if (typeof route.props.name === 'string') {\n          otherName = 'props';\n        }\n        defaultView['/' + route[otherName].name.toLowerCase()] = route.type;\n        defaultView.default = '/' + route[otherName].name.toLowerCase();\n      } else {\n        defaultView.default = route;\n      }\n      this.setState({ views: defaultView });\n    }\n  }, {\n    key: 'addFuncs',\n    value: function addFuncs(input) {\n      if (input.constructor !== Object) {\n        throw new TypeError('Input to addFuncs must be an object with methods that are functions');\n      }\n      for (var key in input) {\n        if (input[key].constructor !== Function) {\n          throw new TypeError('Your input to addFuncs contains ' + key + ' which is not a function');\n        }\n        this.state.userFunctions[key] = input[key].bind(this);\n      }\n    }\n  }, {\n    key: 'changeView',\n    value: function changeView(view, newState) {\n      if (typeof view !== 'string') {\n        throw new Error('changeView(): takes a string as a first parameter');\n      }\n      if (newState.constructor !== Object) {\n        throw new Error('changeView(): takes an object as a second parameter');\n      }\n      // update appState only by copying\n      var notAppState = Object.assign({}, this.state.appState, newState);\n      // update appState on this.state\n      this.setState({ appState: notAppState });\n      window.location.hash = '#/' + view;\n    }\n  }, {\n    key: 'routeLink',\n    value: function routeLink(view) {\n      if (this.state.views[view]) {\n        this.setState({ view: this.state.views[view] }); // TODO: let Dev pass in variable for url string\n      } else {\n        window.location.hash = '#' + this.state.views.default;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var navBar = this.state.renderNav ? _react2.default.createElement(this.state.renderNav, { state: this.state.appState, powers: this.state.userFunctions }) : undefined;\n      return _react2.default.createElement(\n        'div',\n        null,\n        navBar,\n        _react2.default.createElement(this.state.view, { state: this.state.appState, powers: this.state.userFunctions })\n      );\n    }\n  }]);\n\n  return Container;\n}(_react2.default.Component);\n\nexports.Container = Container;\nexports.Desklamp = Desklamp;\nexports.Link = Link;\nexports.AsyncLink = AsyncLink;"}